{
  "compilerOptions": {
    /* Basic Options */
    "target": "ESNext", // Specify ECMAScript target version
    "module": "CommonJS", // Specify module code generation
    "lib": ["ESNext"], // Specify library files to be included in the compilation
    "allowJs": true, // Allow JavaScript files to be compiled
    "outDir": "./dist", // Redirect output structure to the directory
    "rootDir": "./src", // Specify the root directory of input files
    "strict": true, // Enable all strict type-checking options
    "esModuleInterop": true, // Enable esModuleInterop to allow import/export of CommonJS modules
    "moduleResolution": "node", // Use Node.js module resolution strategy
    "skipLibCheck": true, // Skip type checking of declaration files
    "forceConsistentCasingInFileNames": true, // Disallow inconsistently-cased references to the same file
    "resolveJsonModule": true, // Include modules imported with .json extensions
    "isolatedModules": true, // Ensure that each file can be safely transpiled without relying on other imports
    "noImplicitAny": true, // Raise error on expressions and declarations with an implied 'any' type

    /* Source Map Options */
    "sourceMap": true, // Generate corresponding '.map' file

    /* Experimental Options */
    "experimentalDecorators": true, // Enables experimental support for decorators
    "emitDecoratorMetadata": true // Enables experimental support for emitting type metadata for decorators
  },
  "include": ["src/**/*.ts"], // Include all TypeScript files in the src folder
  "exclude": ["node_modules", "**/*.spec.ts"] // Exclude node_modules and test files
}

// Explanation:

// target: Specifies the JavaScript language version for the emitted code. ESNext is often used for the latest features.
// module: Set to CommonJS, the module system used by Node.js.
// lib: Includes standard library files, here set to ESNext for modern ECMAScript features.
// allowJs: Allows JavaScript files to be included in the project.
// outDir: Specifies the output directory for compiled files, usually dist.
// rootDir: Specifies the root directory of TypeScript files, typically src.
// strict: Enables strict type-checking options.
// esModuleInterop: Enables interoperability between CommonJS and ES Modules.
// moduleResolution: Uses Node.js's module resolution strategy.
// skipLibCheck: Skips type checking for all declaration files (.d.ts).
// forceConsistentCasingInFileNames: Enforces consistent casing in import paths.
// resolveJsonModule: Allows importing JSON files.
// isolatedModules: Ensures that each file is treated as a separate module.
// sourceMap: Generates source maps for debugging.
// experimentalDecorators & emitDecoratorMetadata: Enables support for decorators, which might be needed for frameworks like NestJS.
